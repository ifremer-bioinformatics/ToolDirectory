#!/usr/bin/env python3

import argparse
import sys
import os
from lib import core_tool as cl


class ToolDir(object):

    def __init__(self):
        parser = argparse.ArgumentParser(
            description='ToolDirectory: Dynamic visualization of software',
            usage='''tooldir <command> [<args>]
            The available commands are:
            create   Create tool properties
            kcsv     Create csv for Keshif visualization
            ''')
        #  upgrade  Update tool properties (add new key(s), change values)
        parser.add_argument('command', help='Subcommand to run')
        # if there is no command specified, print the parser's help message
        if len(sys.argv) == 1:
            parser.print_help()
            exit(1)
        # parse_args defaults to [1:] for args, but you need to
        # exclude the rest of the args too, or validation will fail
        args = parser.parse_args(sys.argv[1:2])
        # LBYL (Look Before You Leap)
        # validate command using dispatch list, print error message if the command is unrecognized
        # dispatch = ['create','upgrade','kcsv']
        dispatch = ['create', 'kcsv']
        if args.command not in dispatch:  # if not hasattr(self, args.command):
            print(f"tooldir: '{args.command}' is not a tooldir command. See 'tooldir --help'")
            exit(1)
        # if not hasattr(self, args.command):
        #     print('Unrecognized command')
        #     parser.print_help()
        #     exit(1)
        # use dispatch pattern to invoke method with same name
        getattr(self, args.command)()

    def create(self):
        parser = argparse.ArgumentParser(description="Create tool properties JSON")
        parser.add_argument('-n', dest="name", type=str, required=True, help='Tool Name. Ex: bowtie2')
        parser.add_argument('-v', dest="version", type=str, required=True, help='Tool version. Ex: 2.3.5')
        parser.add_argument('-o', dest="installer", type=str, required=True, help='Installer uid. Ex: acormier')
        parser.add_argument('-c', dest="cmdline", type=str, default='true', choices=['true', 'false'],
                            help='Available in cmdline [%(default)s]')
        parser.add_argument('-g', dest="galaxy", type=str, default='false', choices=['true', 'false'],
                            help='Available in Galaxy [%(default)s]')
        parser.add_argument('-i', dest="environment", type=str, default='c', choices=['c', 'b', 'd', 's', 'o'],
                            help='[c]onda/[b]ash/[d]ocker/[s]ingularity/[o]ther [%(default)s]')
        parser.add_argument('-p', dest="path", type=str, default='test/ifb/', help='Path to module files')
        parser.add_argument('-d', dest="datetime", type=str, help='Installation date [Current date]')

        args = parser.parse_args(sys.argv[2:])

        cl.check_path(args)
        properties = os.path.join(args.path, args.name, 'properties.json')
        if os.path.isfile(properties):
            cl.add_version(args, properties)
        else:
            cl.create_properties(args, properties)

    def kcsv(self):
        parser = argparse.ArgumentParser(description="Create csv for Keshif visualisation")
        parser.add_argument('-p', dest="toolspath", type=str, default="test/", help='Tools main folder')
        parser.add_argument('-o', dest="csvfile", type=str, default="test/Softwares.csv", help='Output csv name')

        args = parser.parse_args(sys.argv[2:])

        directories = cl.walk_level(args.toolspath)
        prop_json = cl.get_json(directories)
        cl.kcsv_writing(args.csvfile, prop_json)


if __name__ == '__main__':
    ToolDir()
